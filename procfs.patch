diff --git a/cpuinfo.go b/cpuinfo.go
index 31d42f7..b9fb589 100644
--- a/cpuinfo.go
+++ b/cpuinfo.go
@@ -407,6 +407,50 @@ func parseCPUInfoPPC(info []byte) ([]CPUInfo, error) {
        return cpuinfo, nil
 }

+func parseCPUInfoRISCV(info []byte) ([]CPUInfo, error) {
+       scanner := bufio.NewScanner(bytes.NewReader(info))
+
+       firstLine := firstNonEmptyLine(scanner)
+       if !strings.HasPrefix(firstLine, "processor") || !strings.Contains(firstLine, ":") {
+               return nil, errors.New("invalid cpuinfo file: " + firstLine)
+       }
+       field := strings.SplitN(firstLine, ": ", 2)
+       v, err := strconv.ParseUint(field[1], 0, 32)
+       if err != nil {
+               return nil, err
+       }
+       firstcpu := CPUInfo{Processor: uint(v)}
+       cpuinfo := []CPUInfo{firstcpu}
+       i := 0
+
+       for scanner.Scan() {
+               line := scanner.Text()
+               if !strings.Contains(line, ":") {
+                       continue
+               }
+               field := strings.SplitN(line, ": ", 2)
+               switch strings.TrimSpace(field[0]) {
+               case "processor":
+                       v, err := strconv.ParseUint(field[1], 0, 32)
+                       if err != nil {
+                               return nil, err
+                       }
+                       i = int(v)
+                       cpuinfo = append(cpuinfo, CPUInfo{}) // start of the next processor
+                       cpuinfo[i].Processor = uint(v)
+               case "hart":
+                       cpuinfo[i].CoreID = field[1]
+               case "isa":
+                       cpuinfo[i].ModelName = field[1]
+               }
+       }
+       return cpuinfo, nil
+}
+
+func parseCPUInfoDummy(_ []byte) ([]CPUInfo, error) { // nolint:unused,deadcode
+       return nil, errors.New("not implemented")
+}
+
 // firstNonEmptyLine advances the scanner to the first non-empty line
 // and returns the contents of that line
 func firstNonEmptyLine(scanner *bufio.Scanner) string {
diff --git a/cpuinfo_test.go b/cpuinfo_test.go
index a8536d2..bfec15d 100644
--- a/cpuinfo_test.go
+++ b/cpuinfo_test.go
@@ -203,10 +203,23 @@ timebase  : 512000000
 platform       : pSeries
 model          : IBM,8233-E8B
 machine                : CHRP IBM,8233-E8B
+`
+
+       cpuinfoRiscv64 = `
+processor      : 0
+hart           : 0
+isa            : rv64imafdcsu
+mmu            : sv48
+
+processor      : 1
+hart           : 1
+isa            : rv64imafdcsu
+mmu            : sv48
 `
 )

 func TestCPUInfoX86(t *testing.T) {
+       parseCPUInfo = parseCPUInfoX86
        cpuinfo, err := getProcFixtures(t).CPUInfo()
        if err != nil {
                t.Fatal(err)
@@ -344,3 +357,19 @@ func TestCPUInfoParsePPC(t *testing.T) {
                t.Errorf("want cpu mhz %v, have %v", want, have)
        }
 }
+
+func TestCPUInfoParseRISCV64(t *testing.T) {
+       cpuinfo, err := parseCPUInfoRISCV([]byte(cpuinfoRiscv64))
+       if err != nil || cpuinfo == nil {
+               t.Fatalf("unable to parse ppc cpu info: %v", err)
+       }
+       if want, have := 2, len(cpuinfo); want != have {
+               t.Errorf("want number of processors %v, have %v", want, have)
+       }
+       if want, have := "1", cpuinfo[1].CoreID; want != have {
+               t.Errorf("want CoreId %v, have %v", want, have)
+       }
+       if want, have := "rv64imafdcsu", cpuinfo[1].ModelName; want != have {
+               t.Errorf("want ModelName %v, have %v", want, have)
+       }
+}